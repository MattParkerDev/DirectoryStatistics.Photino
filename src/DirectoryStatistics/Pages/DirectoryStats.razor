@page "/directorystatistics"
@using System.Diagnostics
@using DirectoryStatistics.Models
@using DirectoryStatistics.Services

@inject AppState AppState

<MudStack>
	<MudStack Spacing="0">
		<MudText Typo="Typo.h5">Directory Statistics</MudText>
		<MudText Typo="Typo.body2">List all of the files and folders on your computer and sort by size</MudText>
	</MudStack>

	@if (_running)
	{
		<MudProgressCircular Indeterminate="true" />
		return;
	}
	<MudText>Treemap completed in @_stopwatch.ElapsedMilliseconds ms</MudText>

	<MudTable Items="[_rootFolder]" Elevation="2" Dense="true">
		<ColGroup>
			<col/>
			<col style="width: 10%"/>
			<col style="width: 20%"/>
			<col style="width: 8%"/>
		</ColGroup>
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Size</MudTh>
			<MudTh>%</MudTh>
			<MudTh>%</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>@context.Name</MudTd>
			<MudTd>@context.TotalFolderSizeFormatted</MudTd>
			<MudTd><MudProgressLinear Value="@context.TotalFolderSize" Max="@_rootFolder.TotalFolderSize" Color="Color.Primary" /></MudTd>
			<MudTd>@context.GetPercentageOfRootFolderSize(_rootFolder.TotalFolderSize).ToString("N1")</MudTd>
		</RowTemplate>
		<ChildRowContent>
			<td colspan="4">
				<MudTable Items="@context.Folders" Dense="true" Elevation="0">
					<ColGroup>
						<col/>
						<col style="width: 10%"/>
						<col style="width: 20%"/>
						<col style="width: 8%"/>
					</ColGroup>
					<RowTemplate Context="innerContext">
						<MudTd>@innerContext.Name</MudTd>
						<MudTd>@innerContext.TotalFolderSizeFormatted</MudTd>
						<MudTd><MudProgressLinear Value="@innerContext.TotalFolderSize" Max="@_rootFolder.TotalFolderSize" Color="Color.Primary"/></MudTd>
						<MudTd>@innerContext.GetPercentageOfRootFolderSize(_rootFolder.TotalFolderSize).ToString("N1")</MudTd>
					</RowTemplate>
				</MudTable>
			</td>
		</ChildRowContent>
	</MudTable>
</MudStack>

@code {
	private Folder _rootFolder = null!;
	private bool _running = false;
	private Stopwatch _stopwatch = new();

	protected override async Task OnInitializedAsync()
	{
		if (AppState.RootFolder is not null)
		{
			_rootFolder = AppState.RootFolder;
			return;
		}

		var rootPath = Path.GetPathRoot(Environment.CurrentDirectory)!;
		_rootFolder = new Folder
		{
			Path = rootPath,
			Name = rootPath
		};
		_running = true;
		_stopwatch.Start();
		_rootFolder.Folders = await Task.Run(() => _rootFolder.GetSubFolders());
		AppState.RootFolder = _rootFolder;
		_stopwatch.Stop();
		_running = false;
	}
}
