@page "/directorystatistics"
@using System.Diagnostics
@using DirectoryStatistics.Models
@using DirectoryStatistics.Services

@inject AppState AppState

<MudStack>
	<MudStack Spacing="0">
		<MudText Typo="Typo.h5">Directory Statistics</MudText>
		<MudText Typo="Typo.body2">List all of the files and folders on your computer and sort by size</MudText>
	</MudStack>

	@if (_running)
	{
		<MudProgressCircular Indeterminate="true" />
		return;
	}
	<MudText>Treemap completed in @_stopwatch.ElapsedMilliseconds ms</MudText>

	<MudTable Items="[_rootFolder]" Elevation="2" Dense="true">
		<ColGroup>
			@GetTableColumnFormatting()
		</ColGroup>
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh Style="text-align:right">Size</MudTh>
			<MudTh>%</MudTh>
			<MudTh>%</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>
				<MudStack Row="true">
					<MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Warning" Size="Size.Small" />
					@context.Name
				</MudStack>
			</MudTd>
			<MudTd Style="text-align:right">@context.TotalFolderSizeFormatted</MudTd>
			<MudTd><MudProgressLinear Value="@context.TotalFolderSize" Max="@_rootFolder.TotalFolderSize" Color="Color.Primary" /></MudTd>
			<MudTd>@context.GetPercentageOfRootFolderSize(_rootFolder.TotalFolderSize).ToString("N1")</MudTd>
		</RowTemplate>
		<ChildRowContent>
			<td colspan="4">
				@GetFolderTable(context)
			</td>
		</ChildRowContent>
	</MudTable>
</MudStack>

@code {
	private Folder _rootFolder = null!;
	private bool _running = false;
	private Stopwatch _stopwatch = new();

	private RenderFragment GetTableColumnFormatting() =>
		@<text>
			 <col/>
			 <col style="width: 10%"/>
			 <col style="width: 20%"/>
			 <col style="width: 8%"/>
		 </text>;

	private RenderFragment GetFolderTable(Folder folder) =>
		@<text>
			 <MudTable Items="@folder.Folders.OrderByDescending(s => s.TotalFolderSize)" Dense="true" Elevation="0">
				 <ColGroup>
					 @GetTableColumnFormatting()
				 </ColGroup>
				 <RowTemplate>
					 <MudTd>
						 <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
							 <MudToggleIconButton @bind-Toggled="@context.Expanded" Size="Size.Small" Icon="@Icons.Material.Outlined.ArrowRight" ToggledIcon="@Icons.Material.Outlined.ArrowDropDown" />
							 <MudIcon Class="mr-1" Icon="@(context.IsPseudoFolder ? Icons.Material.Filled.Square : Icons.Material.Filled.Folder)" Color="@(context.IsPseudoFolder ? Color.Dark : Color.Warning)" Size="Size.Small"/>
							 @context.Name
						 </MudStack>
					 </MudTd>
					 <MudTd Style="text-align:right">@context.TotalFolderSizeFormatted</MudTd>
					 <MudTd><MudProgressLinear Value="@context.TotalFolderSize" Max="@_rootFolder.TotalFolderSize" Color="Color.Primary"/></MudTd>
					 <MudTd>@context.GetPercentageOfRootFolderSize(_rootFolder.TotalFolderSize).ToString("N1")</MudTd>
				 </RowTemplate>
				 <ChildRowContent>
					 @if (context.Expanded)
					 {
						 <td colspan="4">
							 @if (context.IsPseudoFolder)
							 {
								 @GetFileTable(context)
							 }
							 else
							 {
								 @GetFolderTable(context)
							 }
						 </td>
					 }
				 </ChildRowContent>
			 </MudTable>
		 </text>;

	private RenderFragment GetFileTable(Folder folder) =>
		@<text>
			 <MudTable Items="@folder.Files.OrderByDescending(s => s.Size)" Elevation="0" Dense="true">
				 <ColGroup>
					 @GetTableColumnFormatting()
				 </ColGroup>
				 <RowTemplate>
					 <MudTd>
						 <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
							 <MudIcon Color="Color.Dark" Size="Size.Small" Class="mr-1" Icon="@Icons.Material.Filled.Square"/>
							 @context.Name
						 </MudStack>
					 </MudTd>
					 <MudTd Style="text-align:right">@context.SizeFormatted</MudTd>
					 <MudTd><MudProgressLinear Value="@context.Size" Max="@_rootFolder.TotalFolderSize" Color="Color.Primary"/></MudTd>
					 <MudTd></MudTd>
				 </RowTemplate>
			 </MudTable>
		 </text>;

	protected override async Task OnInitializedAsync()
	{
		if (AppState.RootFolder is not null)
		{
			_rootFolder = AppState.RootFolder;
			return;
		}

		var rootPath = Path.GetPathRoot(Environment.CurrentDirectory)!;
		_rootFolder = new Folder
		{
			Path = rootPath,
			Name = rootPath
		};
		_running = true;
		_stopwatch.Start();
		_rootFolder.Folders = await Task.Run(() => _rootFolder.GetSubFolders());
		AppState.RootFolder = _rootFolder;
		_stopwatch.Stop();
		_running = false;
	}
}
